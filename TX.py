# Importaci√≥n de librer√≠as necesarias
import struct  # Para empaquetar/desempaquetar datos binarios
import time    # Para funciones de retardo
import math    # Para c√°lculos matem√°ticos (desviaci√≥n est√°ndar)
from machine import Pin, SPI  # M√≥dulos para control de GPIO y comunicaci√≥n SPI
from nrf24l01 import NRF24L01  # Librer√≠a para controlar el transceptor NRF24L01
import network  # Para gestionar conexiones WiFi

# Configuraci√≥n del bot√≥n en el pin GPIO 18 con resistencia pull-up interna
boton = Pin(18, Pin.IN, Pin.PULL_UP)

# Configuraci√≥n de credenciales WiFi
# üö® Secci√≥n para personalizar con tus propias credenciales
SSID = "Gaho00"     # Nombre de la red WiFi
PASSWORD = "capitancp"  # Contrase√±a de la red WiFi

# Inicializaci√≥n del m√≥dulo WiFi en modo estaci√≥n (cliente)
wifi = network.WLAN(network.STA_IF)
wifi.active(True)  # Activar la interfaz WiFi
wifi.connect(SSID, PASSWORD)  # Iniciar conexi√≥n con la red WiFi
print("Conectando a WiFi...")

# Bucle de verificaci√≥n de conexi√≥n WiFi con 20 intentos
for i in range(20):
    if wifi.isconnected():
        print("‚úÖ Conectado a WiFi")
        print("IP:", wifi.ifconfig()[0])  # Muestra la direcci√≥n IP asignada
        break
    else:
        print(f"Intento {i+1}/10: esperando conexi√≥n...")
        time.sleep(1)  # Espera 1 segundo entre intentos
else:  # Este bloque se ejecuta si el bucle termina normalmente (sin break)
    print("‚ùå No se pudo conectar a WiFi despu√©s de 10 segundos.")

# Definici√≥n de pines para la comunicaci√≥n SPI con el NRF24L01
SPI_ID = 0      # Identificador del bus SPI a utilizar
SCK_PIN = 2     # Pin para la se√±al de reloj SPI
MOSI_PIN = 3    # Pin Master Out Slave In (datos salientes)
MISO_PIN = 4    # Pin Master In Slave Out (datos entrantes)
CSN_PIN = 5     # Pin Chip Select (selecci√≥n de chip)
CE_PIN = 6      # Pin Chip Enable (habilitaci√≥n de chip)

# Par√°metros de configuraci√≥n del NRF24L01
CANAL_RF = 46                # Canal de radiofrecuencia (0-125)
TX_ADDRESS = b"\xe1\xf0\xf0\xf0\xf0"  # Direcci√≥n de transmisi√≥n (5 bytes)
PAYLOAD_SIZE = 8             # Tama√±o del paquete de datos en bytes

def setup_nrf24l01():
    """
    Configura e inicializa el m√≥dulo NRF24L01
    """
    # Inicializaci√≥n del bus SPI con los pines definidos
    spi = SPI(SPI_ID, sck=Pin(SCK_PIN), mosi=Pin(MOSI_PIN), miso=Pin(MISO_PIN))
    csn = Pin(CSN_PIN, mode=Pin.OUT, value=1)  # CSN inicia en alto (inactivo)
    ce = Pin(CE_PIN, mode=Pin.OUT, value=0)    # CE inicia en bajo (modo standby)
    
    # Creaci√≥n del objeto NRF24L01
    nrf = NRF24L01(spi, csn, ce, payload_size=PAYLOAD_SIZE)
    
    # Configuraci√≥n del canal RF
    nrf.set_channel(CANAL_RF)
    
    # Configuraci√≥n de potencia y tasa de bits (registro RF_SETUP - 0x06)
    # 0x26 = 00100110 en binario, donde:
    # - Bit 3-2 (RF_DR_HIGH, RF_DR_LOW): 10 selecciona 1 Mbps
    #   (00=1Mbps, 01=2Mbps, 10=250Kbps)
    # - Bit 1-0 (RF_PWR): 11 selecciona m√°xima potencia (0dBm)
    #   (00=-18dBm, 01=-12dBm, 10=-6dBm, 11=0dBm)
    # NOTA: Esta es la configuraci√≥n clave para potencia de transmisi√≥n y tasa de bits
    nrf.reg_write(0x06, 0x26)  # Configura potencia 0dBm y tasa de 250 Kbps
    
    # Para cambiar la potencia y tasa, modifica el segundo par√°metro:
    # - Para 2Mbps y 0dBm: nrf.reg_write(0x06, 0x0E)  # 00001110
    # - Para 1Mbps y -6dBm: nrf.reg_write(0x06, 0x0A) # 00001010
    # - Para 250Kbps y -18dBm: nrf.reg_write(0x06, 0x20) # 00100000
    
    # Apertura del canal de transmisi√≥n con la direcci√≥n especificada
    nrf.open_tx_pipe(TX_ADDRESS)
    
    print(f"NRF24L01 configurado en canal {CANAL_RF}")
    return nrf

def medir_rssi():
    """
    Realiza 10 mediciones del nivel de se√±al WiFi (RSSI) y guarda los resultados
    """
    rssi_values = []  # Lista para almacenar valores de RSSI
    
    # Realiza 10 mediciones consecutivas
    for i in range(10):
        if wifi.isconnected():
            rssi = wifi.status('rssi')  # Obtiene el RSSI actual
        else:
            rssi = -100  # Valor predeterminado si no hay conexi√≥n
        print(f"Medici√≥n {i+1}: RSSI = {rssi} dBm")
        rssi_values.append(rssi)
        time.sleep(0.1)  # Peque√±a pausa entre mediciones
    
    # C√°lculo de estad√≠sticas b√°sicas
    avg_rssi = sum(rssi_values) / len(rssi_values)  # Promedio
    # C√°lculo de desviaci√≥n est√°ndar
    std_dev_rssi = math.sqrt(sum([(x - avg_rssi) ** 2 for x in rssi_values]) / len(rssi_values))
    
    print(f"Promedio RSSI: {avg_rssi:.2f} dBm")
    print(f"Desviaci√≥n est√°ndar: {std_dev_rssi:.2f} dBm")
    
    # Guarda las mediciones en un archivo
    with open("RSSI_Medicion.txt", "w") as log:
        for i, val in enumerate(rssi_values):
            log.write(f"{i},{val}\n")

def transmitir_archivo(nrf, file_path):
    """
    Lee un archivo de mediciones y transmite los datos usando el NRF24L01
    
    Args:
        nrf: Objeto NRF24L01 inicializado
        file_path: Ruta al archivo de mediciones
    """
    try:
        with open(file_path, "r") as file:
            for line in file:
                # Parsea cada l√≠nea del archivo (formato: "√≠ndice,valor_rssi")
                partes = line.strip().split(",")
                if len(partes) == 2:
                    try:
                        idx = int(partes[0])  # √çndice de la medici√≥n
                        rssi = int(partes[1])  # Valor RSSI
                        # Empaqueta los datos como dos enteros para transmisi√≥n
                        payload = struct.pack("ii", idx, rssi)
                        # Env√≠a el paquete de datos
                        nrf.send(payload)
                        # Solo mostramos el valor RSSI, sin el ID
                        print(f"Enviado RSSI: {rssi} dBm")
                        time.sleep(0.1)  # Peque√±a pausa entre transmisiones
                    except ValueError:
                        print("L√≠nea malformada:", line)
        print("Archivo enviado exitosamente.")
    except Exception as e:
        print(f"Error al transmitir archivo: {e}")

def main():
    """
    Funci√≥n principal del programa
    """
    print("\n--- Transmisor NRF24L01 listo ---")
    try:
        # Inicializa el m√≥dulo NRF24L01
        nrf = setup_nrf24l01()
    except Exception as e:
        print(f"Error al configurar NRF24L01: {e}")
        return
    
    # Bucle principal - espera a que se presione el bot√≥n
    while True:
        if boton.value() == 0:  # Bot√≥n presionado (l√≥gica invertida por pull-up)
            print("Bot√≥n presionado, midiendo RSSI...")
            medir_rssi()  # Realiza mediciones de RSSI
            # Transmite el archivo de mediciones v√≠a NRF24L01
            transmitir_archivo(nrf, "RSSI_Medicion.txt")
            time.sleep(2)  # Evita rebotes del bot√≥n

# Punto de entrada del programa
if __name__ == "__main__": 
    main()
